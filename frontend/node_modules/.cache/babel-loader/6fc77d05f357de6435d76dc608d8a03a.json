{"ast":null,"code":"var _s = $RefreshSig$();\n\nexport const restoreCSRF = async () => {\n  const result = await csrfFetch(\"/api/session\");\n  storeToken(result);\n  return result;\n};\nexport const restoreCurrentUser = () => {\n  _s();\n\n  const user = useSelector(state => state.session.user);\n\n  if (user) {\n    sessionStorage.setItem(\"current-user\", user);\n  } else {\n    sessionStorage.setItem(\"current-user\", null);\n  }\n}; // lose state by refreshing page.\n// set user id session storage\n\n_s(restoreCurrentUser, \"ODc3cjw/vvoWaLFqHWcEGODyOfo=\", true);\n\nexport const storeToken = response => {\n  const token = response.headers.get(\"X-CSRF-Token\");\n  if (token) sessionStorage.setItem(\"X-CSRF-Token\", token);\n}; // we can do restoreSession().then ( () => { put reactDom.render ( <components that need>)})\n// const initialize app =>\n// restoreSession().then(initializeapp\n//token needs to match usear in the back )\n\nconst csrfFetch = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.method ||= \"GET\";\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== \"GET\") {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.headers[\"Accept\"] = \"application/json\";\n    options.headers[\"X-CSRF-Token\"] = sessionStorage.getItem(\"X-CSRF-Token\");\n  }\n\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;","map":{"version":3,"names":["restoreCSRF","result","csrfFetch","storeToken","restoreCurrentUser","user","useSelector","state","session","sessionStorage","setItem","response","token","headers","get","url","options","method","toUpperCase","getItem","res","fetch","status"],"sources":["/Users/postgres/Desktop/Tea/teafrontend/src/store/csrf.js"],"sourcesContent":["export const restoreCSRF = async () => {\n  const result = await csrfFetch(\"/api/session\");\n  storeToken(result);\n  return result;\n};\n\nexport const restoreCurrentUser = () => {\n  const user = useSelector((state) => state.session.user);\n\n  if (user) {\n    sessionStorage.setItem(\"current-user\", user);\n  } else {\n    sessionStorage.setItem(\"current-user\", null);\n  }\n};\n\n// lose state by refreshing page.\n// set user id session storage\n\nexport const storeToken = (response) => {\n  const token = response.headers.get(\"X-CSRF-Token\");\n  if (token) sessionStorage.setItem(\"X-CSRF-Token\", token);\n};\n\n// we can do restoreSession().then ( () => { put reactDom.render ( <components that need>)})\n// const initialize app =>\n// restoreSession().then(initializeapp\n//token needs to match usear in the back )\n\nconst csrfFetch = async (url, options = {}) => {\n  options.method ||= \"GET\";\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== \"GET\") {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.headers[\"Accept\"] = \"application/json\";\n    options.headers[\"X-CSRF-Token\"] = sessionStorage.getItem(\"X-CSRF-Token\");\n  }\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;\n"],"mappings":";;AAAA,OAAO,MAAMA,WAAW,GAAG,YAAY;EACrC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAAC,cAAD,CAA9B;EACAC,UAAU,CAACF,MAAD,CAAV;EACA,OAAOA,MAAP;AACD,CAJM;AAMP,OAAO,MAAMG,kBAAkB,GAAG,MAAM;EAAA;;EACtC,MAAMC,IAAI,GAAGC,WAAW,CAAEC,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcH,IAA1B,CAAxB;;EAEA,IAAIA,IAAJ,EAAU;IACRI,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCL,IAAvC;EACD,CAFD,MAEO;IACLI,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuC,IAAvC;EACD;AACF,CARM,C,CAUP;AACA;;GAXaN,kB;;AAab,OAAO,MAAMD,UAAU,GAAIQ,QAAD,IAAc;EACtC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAd;EACA,IAAIF,KAAJ,EAAWH,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCE,KAAvC;AACZ,CAHM,C,CAKP;AACA;AACA;AACA;;AAEA,MAAMV,SAAS,GAAG,gBAAOa,GAAP,EAA6B;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EAC7CA,OAAO,CAACC,MAAR,KAAmB,KAAnB;EACAD,OAAO,CAACH,OAAR,KAAoB,EAApB;;EAEA,IAAIG,OAAO,CAACC,MAAR,CAAeC,WAAf,OAAiC,KAArC,EAA4C;IAC1CF,OAAO,CAACH,OAAR,CAAgB,cAAhB,IAAkC,kBAAlC;IACAG,OAAO,CAACH,OAAR,CAAgB,QAAhB,IAA4B,kBAA5B;IACAG,OAAO,CAACH,OAAR,CAAgB,cAAhB,IAAkCJ,cAAc,CAACU,OAAf,CAAuB,cAAvB,CAAlC;EACD;;EACD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACN,GAAD,EAAMC,OAAN,CAAvB;EACA,IAAII,GAAG,CAACE,MAAJ,IAAc,GAAlB,EAAuB,MAAMF,GAAN;EACvB,OAAOA,GAAP;AACD,CAZD;;AAcA,eAAelB,SAAf"},"metadata":{},"sourceType":"module"}