{"ast":null,"code":"import csrfFetch from \"../store/csrf\";\nconst ADD_SHARE = \"ADD_SHARE\";\nconst LOAD_SHARE = \"LOAD_SHARE\";\nconst RANDOM_SHARE = \"RANDOM_SHARE\";\nexport const addShare = share => ({\n  type: ADD_SHARE,\n  share\n});\nexport const loadShare = share_id => ({\n  type: LOAD_SHARE,\n  share_id\n});\nexport const randomShare = share => ({\n  type: RANDOM_SHARE,\n  share\n});\nexport const getShare = share_id => async dispatch => {\n  const response = await csrfFetch(`/api/shares/${share_id}`);\n\n  if (response.ok) {\n    const share = await response.json();\n    dispatch(loadShare(share));\n  }\n};\nexport const getRandomShare = () => async dispatch => {\n  const response = await csrfFetch(`/api/shares/random`);\n  const share = await response.json();\n  dispatch(randomShare(share));\n};\nexport const createShare = data => async dispatch => {\n  //need to handle default user in the back end in controller\n  const response = await csrfFetch(`/api/shares`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      accept: \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (response.ok) {\n    const newShare = await response.json();\n    dispatch(addShare(newShare));\n  }\n};\nlet initialState = {};\nexport default function shareReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = { ...state\n  };\n  console.log(\"in reducer\", action);\n\n  switch (action.type) {\n    case ADD_SHARE:\n    case LOAD_SHARE:\n      //coming in with share id from back end\n      const newShare = {\n        [action.share_id]: action.share\n      }; //how do i have access to share when i'm not sending it back?\n\n      return { ...newState,\n        ...newShare\n      };\n\n    case RANDOM_SHARE:\n      return { ...action.share\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["csrfFetch","ADD_SHARE","LOAD_SHARE","RANDOM_SHARE","addShare","share","type","loadShare","share_id","randomShare","getShare","dispatch","response","ok","json","getRandomShare","createShare","data","method","headers","accept","body","JSON","stringify","newShare","initialState","shareReducer","state","action","newState","console","log"],"sources":["/Users/postgres/Desktop/Tea/teafrontend/src/store/share.js"],"sourcesContent":["\n\nimport csrfFetch from \"../store/csrf\"\n\nconst ADD_SHARE = \"ADD_SHARE\";\nconst LOAD_SHARE = \"LOAD_SHARE\";\nconst RANDOM_SHARE = \"RANDOM_SHARE\";\n\nexport const addShare = (share) => ({\n  type: ADD_SHARE,\n  share,\n});\n\nexport const loadShare = (share_id) => ({\n  type: LOAD_SHARE,\n  share_id,\n});\n\nexport const randomShare = (share) => ({\n  type: RANDOM_SHARE,\n  share\n});\n\nexport const getShare = (share_id) => async (dispatch) => {\n  const response = await csrfFetch(`/api/shares/${share_id}`);\n  if (response.ok) {\n    const share = await response.json();\n    dispatch(loadShare(share));\n  }\n};\n\nexport const getRandomShare = () => async (dispatch) => {\n  const response = await csrfFetch(`/api/shares/random`);\n    const share = await response.json();\n    dispatch(randomShare(share));\n  \n};\n\nexport const createShare = (data) => async (dispatch) => {\n  //need to handle default user in the back end in controller\n  const response = await csrfFetch(`/api/shares`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      accept: \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  if (response.ok) {\n    const newShare = await response.json();\n    dispatch(addShare(newShare));\n  }\n};\n\nlet initialState = {};\n\nexport default function shareReducer(state = initialState, action) {\n  const newState = { ...state };\n  console.log(\"in reducer\", action);\n  switch (action.type) {\n    case ADD_SHARE:\n    case LOAD_SHARE: //coming in with share id from back end\n      const newShare = { [action.share_id]: action.share }; //how do i have access to share when i'm not sending it back?\n      return { ...newState, ...newShare };\n    case RANDOM_SHARE:\n      return {...action.share} ;\n    default:\n      return state;\n  }\n}\n"],"mappings":"AAEA,OAAOA,SAAP,MAAsB,eAAtB;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,KAAY;EAClCC,IAAI,EAAEL,SAD4B;EAElCI;AAFkC,CAAZ,CAAjB;AAKP,OAAO,MAAME,SAAS,GAAIC,QAAD,KAAe;EACtCF,IAAI,EAAEJ,UADgC;EAEtCM;AAFsC,CAAf,CAAlB;AAKP,OAAO,MAAMC,WAAW,GAAIJ,KAAD,KAAY;EACrCC,IAAI,EAAEH,YAD+B;EAErCE;AAFqC,CAAZ,CAApB;AAKP,OAAO,MAAMK,QAAQ,GAAIF,QAAD,IAAc,MAAOG,QAAP,IAAoB;EACxD,MAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAE,eAAcQ,QAAS,EAAzB,CAAhC;;EACA,IAAII,QAAQ,CAACC,EAAb,EAAiB;IACf,MAAMR,KAAK,GAAG,MAAMO,QAAQ,CAACE,IAAT,EAApB;IACAH,QAAQ,CAACJ,SAAS,CAACF,KAAD,CAAV,CAAR;EACD;AACF,CANM;AAQP,OAAO,MAAMU,cAAc,GAAG,MAAM,MAAOJ,QAAP,IAAoB;EACtD,MAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAE,oBAAF,CAAhC;EACE,MAAMK,KAAK,GAAG,MAAMO,QAAQ,CAACE,IAAT,EAApB;EACAH,QAAQ,CAACF,WAAW,CAACJ,KAAD,CAAZ,CAAR;AAEH,CALM;AAOP,OAAO,MAAMW,WAAW,GAAIC,IAAD,IAAU,MAAON,QAAP,IAAoB;EACvD;EACA,MAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAE,aAAF,EAAgB;IAC9CkB,MAAM,EAAE,MADsC;IAE9CC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,MAAM,EAAE;IAFD,CAFqC;IAM9CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;EANwC,CAAhB,CAAhC;;EAQA,IAAIL,QAAQ,CAACC,EAAb,EAAiB;IACf,MAAMW,QAAQ,GAAG,MAAMZ,QAAQ,CAACE,IAAT,EAAvB;IACAH,QAAQ,CAACP,QAAQ,CAACoB,QAAD,CAAT,CAAR;EACD;AACF,CAdM;AAgBP,IAAIC,YAAY,GAAG,EAAnB;AAEA,eAAe,SAASC,YAAT,GAAoD;EAAA,IAA9BC,KAA8B,uEAAtBF,YAAsB;EAAA,IAARG,MAAQ;EACjE,MAAMC,QAAQ,GAAG,EAAE,GAAGF;EAAL,CAAjB;EACAG,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,MAA1B;;EACA,QAAQA,MAAM,CAACtB,IAAf;IACE,KAAKL,SAAL;IACA,KAAKC,UAAL;MAAiB;MACf,MAAMsB,QAAQ,GAAG;QAAE,CAACI,MAAM,CAACpB,QAAR,GAAmBoB,MAAM,CAACvB;MAA5B,CAAjB,CADF,CACwD;;MACtD,OAAO,EAAE,GAAGwB,QAAL;QAAe,GAAGL;MAAlB,CAAP;;IACF,KAAKrB,YAAL;MACE,OAAO,EAAC,GAAGyB,MAAM,CAACvB;MAAX,CAAP;;IACF;MACE,OAAOsB,KAAP;EARJ;AAUD"},"metadata":{},"sourceType":"module"}