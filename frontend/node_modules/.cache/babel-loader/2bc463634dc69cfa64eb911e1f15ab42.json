{"ast":null,"code":"export const restoreCSRF = async () => {\n  const result = await csrfFetch('/api/session');\n  storeToken(result);\n  return re;\n};\nexport const storeToken = response => {\n  const token = response.headers.get('X-CSRF-Token');\n  if (token) sessionStorage.setItem('X-CSRF-Token', Token);\n}; // we can do restoreSession().then ( () => { put reactDom.render ( <components that need>)})\n// const initialize app => \n// restoreSession().then(initializeapp\n//token needs to match usear in the back )\n\nconst csrfFetch = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.method ||= 'GET';\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;","map":{"version":3,"names":["restoreCSRF","result","csrfFetch","storeToken","re","response","token","headers","get","sessionStorage","setItem","Token","url","options","method","toUpperCase","getItem","res","fetch","status"],"sources":["/Users/postgres/Desktop/Tea/teafrontend/src/store/csrf.js"],"sourcesContent":[" export  const restoreCSRF = async () => {\n  const result = await csrfFetch('/api/session')\n  storeToken(result);\n  return re\n };\n\n export const storeToken = (response) =>{\n  const token = response.headers.get('X-CSRF-Token');\n  if (token) sessionStorage.setItem('X-CSRF-Token', Token);\n }\n \n\n // we can do restoreSession().then ( () => { put reactDom.render ( <components that need>)})\n// const initialize app => \n// restoreSession().then(initializeapp\n//token needs to match usear in the back )\n\n const csrfFetch = async (url,options ={}) => {\n  options.method ||= 'GET';\n  options.headers ||= {};\n\nif (options.method.toUpperCase() !== 'GET'){\n      options.headers['Content-Type'] =\n      options.headers['Content-Type'] || 'application/json';\n      options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n  const res = await fetch(url,options);\n  if (res.status >= 400) throw res;\n  return res\n }\n\n export default csrfFetch;"],"mappings":"AAAC,OAAQ,MAAMA,WAAW,GAAG,YAAY;EACvC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAAC,cAAD,CAA9B;EACAC,UAAU,CAACF,MAAD,CAAV;EACA,OAAOG,EAAP;AACA,CAJO;AAMR,OAAO,MAAMD,UAAU,GAAIE,QAAD,IAAa;EACtC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAd;EACA,IAAIF,KAAJ,EAAWG,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCC,KAAvC;AACX,CAHM,C,CAMP;AACD;AACA;AACA;;AAEC,MAAMT,SAAS,GAAG,gBAAOU,GAAP,EAA2B;EAAA,IAAhBC,OAAgB,uEAAP,EAAO;EAC5CA,OAAO,CAACC,MAAR,KAAmB,KAAnB;EACAD,OAAO,CAACN,OAAR,KAAoB,EAApB;;EAEF,IAAIM,OAAO,CAACC,MAAR,CAAeC,WAAf,OAAiC,KAArC,EAA2C;IACrCF,OAAO,CAACN,OAAR,CAAgB,cAAhB,IACAM,OAAO,CAACN,OAAR,CAAgB,cAAhB,KAAmC,kBADnC;IAEAM,OAAO,CAACN,OAAR,CAAgB,cAAhB,IAAkCE,cAAc,CAACO,OAAf,CAAuB,cAAvB,CAAlC;EACH;;EACD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACN,GAAD,EAAKC,OAAL,CAAvB;EACA,IAAII,GAAG,CAACE,MAAJ,IAAc,GAAlB,EAAuB,MAAMF,GAAN;EACvB,OAAOA,GAAP;AACA,CAZD;;AAcA,eAAef,SAAf"},"metadata":{},"sourceType":"module"}