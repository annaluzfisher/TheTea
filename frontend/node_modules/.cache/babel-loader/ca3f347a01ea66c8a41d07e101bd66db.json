{"ast":null,"code":"var _s = $RefreshSig$();\n\nexport const restoreCSRF = async () => {\n  const result = await csrfFetch('/api/session');\n  storeToken(result);\n  return result;\n};\nexport const restoreCurrentUser = () => {\n  _s();\n\n  const user = useSelector(state => state.session.user);\n  useEffect(() => {\n    if (user) sessionStorage.setItem(\"current-user\", user);else sessionStorage.setItem(\"current-user\", user);\n  }, [user]);\n}; // lose state by refreshing page. \n// set user id session storage \n\n_s(restoreCurrentUser, \"w5+LAD8lLDhLgasoS8hF5Z9czWg=\", true);\n\nexport const storeToken = response => {\n  const token = response.headers.get('X-CSRF-Token');\n  if (token) sessionStorage.setItem('X-CSRF-Token', token);\n}; // we can do restoreSession().then ( () => { put reactDom.render ( <components that need>)})\n// const initialize app => \n// restoreSession().then(initializeapp\n//token needs to match usear in the back )\n\nconst csrfFetch = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.method ||= 'GET';\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = 'application/json';\n    options.headers[\"Accept\"] = 'application/json';\n    options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;","map":{"version":3,"names":["restoreCSRF","result","csrfFetch","storeToken","restoreCurrentUser","user","useSelector","state","session","useEffect","sessionStorage","setItem","response","token","headers","get","url","options","method","toUpperCase","getItem","res","fetch","status"],"sources":["/Users/postgres/Desktop/Tea/teafrontend/src/store/csrf.js"],"sourcesContent":[" export  const restoreCSRF = async () => {\n  const result = await csrfFetch('/api/session')\n  storeToken(result);\n  return result;\n }; \n \n export const restoreCurrentUser = () => {\n  const user = useSelector((state)=> state.session.user);\n  useEffect( ()=> {\n    if (user) sessionStorage.setItem(\"current-user\", user);\n    else sessionStorage.setItem(\"current-user\", user);\n  }, [user])\n  \n }\n\n // lose state by refreshing page. \n // set user id session storage \n\n export const storeToken = (response) =>{\n  const token = response.headers.get('X-CSRF-Token');\n  if (token) sessionStorage.setItem('X-CSRF-Token', token);\n }\n \n\n // we can do restoreSession().then ( () => { put reactDom.render ( <components that need>)})\n// const initialize app => \n// restoreSession().then(initializeapp\n//token needs to match usear in the back )\n\n const csrfFetch = async (url,options ={}) => {\n  options.method ||= 'GET';\n  options.headers ||= {};\n\nif (options.method.toUpperCase() !== 'GET'){\n      options.headers['Content-Type'] = 'application/json';\n      options.headers[\"Accept\"] = 'application/json';\n      options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n  const res = await fetch(url,options);\n  if (res.status >= 400) throw res;\n  return res\n }\n\n export default csrfFetch;"],"mappings":";;AAAC,OAAQ,MAAMA,WAAW,GAAG,YAAY;EACvC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAAC,cAAD,CAA9B;EACAC,UAAU,CAACF,MAAD,CAAV;EACA,OAAOA,MAAP;AACA,CAJO;AAMR,OAAO,MAAMG,kBAAkB,GAAG,MAAM;EAAA;;EACvC,MAAMC,IAAI,GAAGC,WAAW,CAAEC,KAAD,IAAUA,KAAK,CAACC,OAAN,CAAcH,IAAzB,CAAxB;EACAI,SAAS,CAAE,MAAK;IACd,IAAIJ,IAAJ,EAAUK,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCN,IAAvC,EAAV,KACKK,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCN,IAAvC;EACN,CAHQ,EAGN,CAACA,IAAD,CAHM,CAAT;AAKA,CAPM,C,CASP;AACA;;GAVaD,kB;;AAYb,OAAO,MAAMD,UAAU,GAAIS,QAAD,IAAa;EACtC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAd;EACA,IAAIF,KAAJ,EAAWH,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCE,KAAvC;AACX,CAHM,C,CAMP;AACD;AACA;AACA;;AAEC,MAAMX,SAAS,GAAG,gBAAOc,GAAP,EAA2B;EAAA,IAAhBC,OAAgB,uEAAP,EAAO;EAC5CA,OAAO,CAACC,MAAR,KAAmB,KAAnB;EACAD,OAAO,CAACH,OAAR,KAAoB,EAApB;;EAEF,IAAIG,OAAO,CAACC,MAAR,CAAeC,WAAf,OAAiC,KAArC,EAA2C;IACrCF,OAAO,CAACH,OAAR,CAAgB,cAAhB,IAAkC,kBAAlC;IACAG,OAAO,CAACH,OAAR,CAAgB,QAAhB,IAA4B,kBAA5B;IACAG,OAAO,CAACH,OAAR,CAAgB,cAAhB,IAAkCJ,cAAc,CAACU,OAAf,CAAuB,cAAvB,CAAlC;EACH;;EACD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACN,GAAD,EAAKC,OAAL,CAAvB;EACA,IAAII,GAAG,CAACE,MAAJ,IAAc,GAAlB,EAAuB,MAAMF,GAAN;EACvB,OAAOA,GAAP;AACA,CAZD;;AAcA,eAAenB,SAAf"},"metadata":{},"sourceType":"module"}