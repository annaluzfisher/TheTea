{"ast":null,"code":"export const restoreCSRF = async () => {\n  const result = await csrfFetch(\"/api/session\");\n  let data = await result.json();\n  storeToken(data);\n  return data;\n};\nexport const storeToken = response => {\n  const token = response.headers.get(\"X-CSRF-Token\");\n  if (token) sessionStorage.setItem(\"X-CSRF-Token\", token);\n  console.log(res);\n};\nexport const restoreCurrentUser = user => {\n  console.log('how anny tiunes', user);\n\n  if (user) {\n    sessionStorage.setItem(\"currentUser\", JSON.stringify(user.id));\n  } else {\n    sessionStorage.setItem(\"currentUser\", null);\n  }\n};\n\nconst csrfFetch = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.method ||= \"GET\";\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== \"GET\") {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.headers[\"Accept\"] = \"application/json\";\n    options.headers[\"X-CSRF-Token\"] = sessionStorage.getItem(\"X-CSRF-Token\");\n  }\n\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;","map":{"version":3,"names":["restoreCSRF","result","csrfFetch","data","json","storeToken","response","token","headers","get","sessionStorage","setItem","console","log","res","restoreCurrentUser","user","JSON","stringify","id","url","options","method","toUpperCase","getItem","fetch","status"],"sources":["/Users/postgres/Desktop/Tea/teafrontend/src/store/csrf.js"],"sourcesContent":["export const restoreCSRF = async () => {\n  const result = await csrfFetch(\"/api/session\");\n  let data = await result.json();\n  storeToken(data);\n  return data;\n};\n\nexport const storeToken = (response) => {\n  const token = response.headers.get(\"X-CSRF-Token\");\n  if (token) sessionStorage.setItem(\"X-CSRF-Token\", token);\n  console.log(res)\n};\n\n\nexport const restoreCurrentUser = (user) => {\n  console.log('how anny tiunes', user)\n  if (user) {\n    sessionStorage.setItem(\"currentUser\", JSON.stringify(user.id));\n  } else {\n    sessionStorage.setItem(\"currentUser\", null);\n  }\n};\n\n\n\n\n\n\nconst csrfFetch = async (url, options = {}) => {\n  options.method ||= \"GET\";\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== \"GET\") {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.headers[\"Accept\"] = \"application/json\";\n    options.headers[\"X-CSRF-Token\"] = sessionStorage.getItem(\"X-CSRF-Token\");\n  }\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,YAAY;EACrC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAAC,cAAD,CAA9B;EACA,IAAIC,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAjB;EACAC,UAAU,CAACF,IAAD,CAAV;EACA,OAAOA,IAAP;AACD,CALM;AAOP,OAAO,MAAME,UAAU,GAAIC,QAAD,IAAc;EACtC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAd;EACA,IAAIF,KAAJ,EAAWG,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCJ,KAAvC;EACXK,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD,CAJM;AAOP,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;EAC1CJ,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BG,IAA/B;;EACA,IAAIA,IAAJ,EAAU;IACRN,cAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsCM,IAAI,CAACC,SAAL,CAAeF,IAAI,CAACG,EAApB,CAAtC;EACD,CAFD,MAEO;IACLT,cAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsC,IAAtC;EACD;AACF,CAPM;;AAcP,MAAMT,SAAS,GAAG,gBAAOkB,GAAP,EAA6B;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EAC7CA,OAAO,CAACC,MAAR,KAAmB,KAAnB;EACAD,OAAO,CAACb,OAAR,KAAoB,EAApB;;EAEA,IAAIa,OAAO,CAACC,MAAR,CAAeC,WAAf,OAAiC,KAArC,EAA4C;IAC1CF,OAAO,CAACb,OAAR,CAAgB,cAAhB,IAAkC,kBAAlC;IACAa,OAAO,CAACb,OAAR,CAAgB,QAAhB,IAA4B,kBAA5B;IACAa,OAAO,CAACb,OAAR,CAAgB,cAAhB,IAAkCE,cAAc,CAACc,OAAf,CAAuB,cAAvB,CAAlC;EACD;;EACD,MAAMV,GAAG,GAAG,MAAMW,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAvB;EACA,IAAIP,GAAG,CAACY,MAAJ,IAAc,GAAlB,EAAuB,MAAMZ,GAAN;EACvB,OAAOA,GAAP;AACD,CAZD;;AAcA,eAAeZ,SAAf"},"metadata":{},"sourceType":"module"}