{"ast":null,"code":"export const restoreCSRF = async () => {\n  const result = await csrfFetch(\"/api/session\");\n  const token = response.headers.get(\"X-CSRF-Token\");\n  if (token) sessionStorage.setItem(\"X-CSRF-Token\", token);\n  let data = await result.json();\n  res(data);\n  return data;\n};\nexport const storeToken = response => {\n  console.log(response);\n};\nexport const restoreCurrentUser = user => {\n  console.log('how manny times', user);\n\n  if (user) {\n    sessionStorage.setItem(\"currentUser\", JSON.stringify(user.id));\n  } else {\n    sessionStorage.setItem(\"currentUser\", null);\n  }\n};\n\nconst csrfFetch = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.method ||= \"GET\";\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== \"GET\") {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.headers[\"Accept\"] = \"application/json\";\n    options.headers[\"X-CSRF-Token\"] = sessionStorage.getItem(\"X-CSRF-Token\");\n  }\n\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;","map":{"version":3,"names":["restoreCSRF","result","csrfFetch","token","response","headers","get","sessionStorage","setItem","data","json","res","storeToken","console","log","restoreCurrentUser","user","JSON","stringify","id","url","options","method","toUpperCase","getItem","fetch","status"],"sources":["/Users/postgres/Desktop/Tea/teafrontend/src/store/csrf.js"],"sourcesContent":["export const restoreCSRF = async () => {\n  const result = await csrfFetch(\"/api/session\");\n    const token = response.headers.get(\"X-CSRF-Token\");\n    if (token) sessionStorage.setItem(\"X-CSRF-Token\", token);\n  let data = await result.json();\n  res(data);\n  return data;\n};\n\nexport const storeToken = (response) => {\n  console.log(response);\n\n  \n};\n\n\nexport const restoreCurrentUser = (user) => {\n  console.log('how manny times', user)\n  if (user) {\n    sessionStorage.setItem(\"currentUser\", JSON.stringify(user.id));\n  } else {\n    sessionStorage.setItem(\"currentUser\", null);\n  }\n};\n\n\n\n\n\n\nconst csrfFetch = async (url, options = {}) => {\n  options.method ||= \"GET\";\n  options.headers ||= {};\n\n  if (options.method.toUpperCase() !== \"GET\") {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.headers[\"Accept\"] = \"application/json\";\n    options.headers[\"X-CSRF-Token\"] = sessionStorage.getItem(\"X-CSRF-Token\");\n  }\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n};\n\nexport default csrfFetch;\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,YAAY;EACrC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAAC,cAAD,CAA9B;EACE,MAAMC,KAAK,GAAGC,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAd;EACA,IAAIH,KAAJ,EAAWI,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCL,KAAvC;EACb,IAAIM,IAAI,GAAG,MAAMR,MAAM,CAACS,IAAP,EAAjB;EACAC,GAAG,CAACF,IAAD,CAAH;EACA,OAAOA,IAAP;AACD,CAPM;AASP,OAAO,MAAMG,UAAU,GAAIR,QAAD,IAAc;EACtCS,OAAO,CAACC,GAAR,CAAYV,QAAZ;AAGD,CAJM;AAOP,OAAO,MAAMW,kBAAkB,GAAIC,IAAD,IAAU;EAC1CH,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,IAA/B;;EACA,IAAIA,IAAJ,EAAU;IACRT,cAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsCS,IAAI,CAACC,SAAL,CAAeF,IAAI,CAACG,EAApB,CAAtC;EACD,CAFD,MAEO;IACLZ,cAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsC,IAAtC;EACD;AACF,CAPM;;AAcP,MAAMN,SAAS,GAAG,gBAAOkB,GAAP,EAA6B;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EAC7CA,OAAO,CAACC,MAAR,KAAmB,KAAnB;EACAD,OAAO,CAAChB,OAAR,KAAoB,EAApB;;EAEA,IAAIgB,OAAO,CAACC,MAAR,CAAeC,WAAf,OAAiC,KAArC,EAA4C;IAC1CF,OAAO,CAAChB,OAAR,CAAgB,cAAhB,IAAkC,kBAAlC;IACAgB,OAAO,CAAChB,OAAR,CAAgB,QAAhB,IAA4B,kBAA5B;IACAgB,OAAO,CAAChB,OAAR,CAAgB,cAAhB,IAAkCE,cAAc,CAACiB,OAAf,CAAuB,cAAvB,CAAlC;EACD;;EACD,MAAMb,GAAG,GAAG,MAAMc,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAvB;EACA,IAAIV,GAAG,CAACe,MAAJ,IAAc,GAAlB,EAAuB,MAAMf,GAAN;EACvB,OAAOA,GAAP;AACD,CAZD;;AAcA,eAAeT,SAAf"},"metadata":{},"sourceType":"module"}